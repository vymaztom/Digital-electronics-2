/**
* @file main.c
* @author Tom치코 Vymazal
* @date 1 Dec 2020
* @copyright 2020 Tom치코 Vymazal
* @brief <brief>
*/

/******************************************************************************
frecvency generator - TABLE

			1209 Hz		1336 Hz		1477 Hz

697 HZ		  1			  2			  3

770 HZ		  4			  5			  6

852 Hz		  7			  8			  9

941 Hz		  *			  0			  #

-------------------------------------------------------------------------------

f1 = 697 Hz 	-> a = 1434.72023 us	-> cycele c =
f2 = 770 Hz 	-> a = 1298.70129 us
f3 = 852 Hz 	-> a = 1173.70892 us
f4 = 941 Hz 	-> a = 1062.69926 us
f5 = 1209 Hz 	-> a = 827.12986 us
f6 = 1336 Hz 	-> a = 748.50299 us
f7 = 1477 Hz 	-> a = 677.04807 us

******************************************************************************/

#ifndef F_CPU
#define F_CPU 16000000
#endif

/* Includes ----------------------------------------------------------*/
#include <avr/io.h>         // AVR device-specific IO definitions
#include <avr/interrupt.h>  // Interrupts standard C library for AVR-GCC
#include <avr/eeprom.h>
#include <util/delay.h>
#include <stdlib.h>         // C library. Needed for conversion function
#include <math.h>
#include "timer.h"
#include "gpio.h"          // Timer library for AVR-GCC
#include "uart.h"           // Peter Fleury's UART librar

/* Defines ----------------------------------------------------------*/


void uart_printnumber(uint16_t value){
	char lcd_string[5] = "00000";
	itoa(value, lcd_string, 10);
	uart_puts(lcd_string);
	uart_puts("\r\n");
	return;
}



uint8_t GLOBAL = 0;

int main(){


	// Initialize I2C (TWI)


	// Initialize UART to asynchronous, 8N1, 9600
	uart_init(UART_BAUD_SELECT(115200, F_CPU));

	uart_puts("START\r\n");

	GPIO_config_output(&DDRC, PC6);
	GPIO_config_output(&DDRD, PD3);

	GPIO_config_input_pullup(&DDRC, PC0);
	GPIO_config_input_pullup(&DDRC, PC1);
	GPIO_config_input_pullup(&DDRC, PC2);
	GPIO_config_input_pullup(&DDRC, PC3);

	GPIO_config_output(&DDRD, PD4);
	GPIO_config_output(&DDRD, PD5);
	GPIO_config_output(&DDRD, PD6);
	GPIO_config_output(&DDRD, PD7);

	GPIO_write_low(&PORTD, PD4);
	GPIO_write_low(&PORTD, PD5);
	GPIO_write_low(&PORTD, PD6);
	GPIO_write_low(&PORTD, PD7);


    // Infinite loop
    while (1){
        /* Empty loop. All subsequent operations are performed exclusively
         * inside interrupt service routines ISRs */


		 GPIO_toggle(&PORTD, PD3);
		 for(uint8_t i = 0 ; i < 4 ; i++){
			 GPIO_write_high(&PORTD, PD4+i);
			 _delay_us(10);
			 uint8_t value = PINC & 0xF;
			 GLOBAL = value;
			 if((value < 16) && (value > 0)){
				 //FIFO_add((void*)b_matrix[i][value-1]);
				 GPIO_toggle(&PORTC, PC6);
			 }
			 GPIO_write_low(&PORTD, PD4+i);
		 }

    }

    // Will never reach this
    return 0;
}



/*
ISR(TIMER0_OVF_vect, ISR_BLOCK){

}
*/
